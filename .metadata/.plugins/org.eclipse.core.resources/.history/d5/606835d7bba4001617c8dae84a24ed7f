//판매대 역할을 하는  buffer 클래스 작성

class buffer{
	//피자 순서를 저장하기 위한 멤버 변수
	int data;
	//뛰어졌는지 체크하기 위한 변수
	boolean empty;
	public buffer(){
		empty = true;
		data = -99;
	}
	//동기화 제어를 위해 get, put은 synchronized메소드를 사용
	public synchronized int get(){
		//버퍼에 데이터가 없으면 wait()해야 한다.
		while(empty){
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//여기에 도달하면 empty가 false라는 이야기 : 물건이 있다.
		empty = true;
		System.out.println("소비자 " + data + "번째 피자 소비");
		notifyAll();//생산자를 깨워라.
		return data;
	}
	public synchronized void put(int input){
		//버퍼에 데이터가 있으면 wait를 해야 한다.
		while(!empty){
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//여기에 도달하면 empty가 true라는 이야기 : 물건이 없다.
		empty = false;
		data = input;
		System.out.println("생산자 " + input + "번째 피자 생산");
		notifyAll();
		return;
	}
}
//생산자 클래스를 만들자
class 프로듀사 extends Thread{
	//멤버 변수
	buffer mybuffer;
	//생성자
	public 프로듀사(buffer input){
		mybuffer = input;
	}
	@Override
	public void run() {
		for(int i = 0;i<100;i++){
			mybuffer.put(i);
		}
	}
	
}
//소비자 클래스를 만들자
class 소비자 implements Runnable{
	buffer mybuffer;
	
	public 소비자(buffer input){
		mybuffer = input;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int i = 0;i<100;i++){
			int v = mybuffer.get();
		}
	}
	
}

public class WDB{
	public static void main(String args[]){
		//1.버퍼객체 생성
		buffer b = new buffer();
		//2.생산자 객체 생성 시 버퍼 객체를 매개 변수로
		프로듀사 p1 = new 프로듀사(b);
		//3. 소비자 객체 생성 시 버퍼 객체를 매개 변수로
		소비자 c1 = new 소비자(b);
		//4.생성자 객체 쓰레드 실행(Thread 클래스로부터 상속)
		p1.start();
		//5. 소비자 객체 쓰레드 실행(runnable 인터페이스로부터 상속)
		Thread tc1 = new Thread(c1);
		tc1.start();
		
	}
}