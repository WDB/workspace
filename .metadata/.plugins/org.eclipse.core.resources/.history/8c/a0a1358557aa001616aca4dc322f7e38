

import java.awt.*;

import javax.swing.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.*;
import java.util.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.io.File;


public class WDB extends JFrame{

	String userid ;			// 게임유저 아이디 받아오기
	
	int cards[] = new int [20];		// 카드 랜덤번호가 들어갈 배열

	JDialog dual;
	JLabel namer;
	JTextField tf1;
	// 상단의 바
	JPanel p1,p2;		
	int sco=0;
	JLabel scores;			// 패널1의 점수
	int sec=0;
	
	JLabel timers; 		// 시간초 보여줄 패널1의 라벨
	Timer abc = new Timer();		// 패널1에 보여줄 라벨의 타이머 초기화
	JButton starter,b1;	  		// 게임 시작 버튼

	
	// 패널 2 본문	
	ImageIcon ic1 ;			// 뒷면 이미지 저장할 아이콘
	ImageIcon ics[]=new ImageIcon[20] ;			// 앞면 이미지 저장할 20개 아이콘들
	
	JLabel labelimage[]=new JLabel[20] ;		// 이미지들을 올려둘 버튼 20개
	
	Timer timerMix = new Timer();		// 패를 섞을때 속도 조절위한 타이머 초기화
	Timer timerHide = new Timer();		// 패를 뒤집기전에 패를 몇초간 보여줄지 타이머
	Timer timecheck = new Timer();		// 패 2개를 뒤집고나서 틀렸을 경우 몇초간 보여줄지 타이머
	
	JLabel check;   	// 2개 패 찾기를 성공한것을 누른건지 확인하기위한버튼
	JLabel first;		// 처음 선택된 버튼
	JLabel second;		// 두번째 선택된 버튼
	
	int twocheck;		// 버튼이 몇번 눌렷는지 체크하기
	int firstnumber;		// 첫번째 눌린 버튼에서 배열의 카드번호 저장하기위해
	int secondnumber;	// 두번째 눌린 버튼에서 배열의 카드번호 저장하기위해
	int nopenumber ;		// 몇번째 버튼인지 확인하기 위한 눌려진 버튼의 번호 저장
	ImageIcon selector ;		// 눌려진 이미지 보여주기위해
	

	// 결과 팝업창
	JDialog dbwindow;
	JLabel labelResultText;
	JLabel labelResultsco;
	JButton clickresult,restart;
	int resultsco=0;
	
	
	
	public WDB(){					// 초기 생성자
	
		super("그림 맞추기");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		p1 = new Jp1();
		p2 = new Jp2();
		
		setBackground(Color.red);
		setLayout(new BorderLayout());

		clickresult = new JButton("확    인");
		clickresult.addActionListener(new condatabase());
		restart = new JButton("다시 시작");
		restart.addActionListener(new starters());
		
		dbwindow = new JDialog(this, "게임 결과");
		dbwindow.setLayout(new GridLayout(3,1));
		dbwindow.setSize(280,300);
		dbwindow.setBounds(230, 300, 200, 100);
		dbwindow.add(labelResultText);
		dbwindow.add(labelResultsco);
		dbwindow.add(clickresult);
		dbwindow.add(restart);
		
		add(p1, BorderLayout.NORTH);
		add(p2, BorderLayout.CENTER);
		p2.setVisible(false);
		setSize(600,700);
		setVisible(true);    
	}
	
	
	class Jp1 extends JPanel{		// 버튼, 라벨패널
		
		public Jp1(){
			
				setBackground(Color.YELLOW);
	            setLayout(new GridLayout(1,3,30,5));   // 패널 레이아웃 설정
	        
	            starter =new JButton("그림 맞추기");

	        	timers = new JLabel("  "+sec+" 초");
	        	
	            scores = new JLabel("점수 :  "+sco + "점 ");
	            	            
	    		labelResultText = new JLabel();
	    		
	    		labelResultsco = new JLabel();
	    		
	            
	        	add(scores);
	            add(starter);
	            add(timers);

	            starter.addActionListener(new starters());
	            
		}			
	}
	// 패널2	
	
	class Jp2 extends JPanel{		// 게임 구현 패널
		
		public Jp2(){
		
			setBackground(Color.RED);
			setLayout(new GridLayout(4,5,10,30));
			
			mixcard();		// 패섞기
			setimage();			// 이미지 받아오기
			setButtonFirstImage();		// 버튼에 이미지 씌우기
			setbuttonname();			// 버튼에 각각 이름 붙이기
			hideButtonImage();
			for(int i =0; i<20;i++){
				labelimage[i].addMouseListener(new player());
			}
			
			for(int i =0; i<20;i++){
				add(labelimage[i]);
			}
		}
	}
	// 패널2
	
	private class starters implements ActionListener {    //  게임 시작버튼
        @Override
        public void actionPerformed(ActionEvent e) {
        	p2.setVisible(false);
        	dual = new JDialog();
        	dual.setSize(180,160);
        	dual.setTitle("이름 입력란");
        	dual.setResizable(false);
        	dual.setLayout(new FlowLayout());
        	tf1 = new JTextField("홍길동",10);
        	namer = new JLabel("이름을 입력하세요");
        	b1 = new JButton("시작");
        	b1.addActionListener(new starts());
        	dual.add(namer);
        	dual.add(tf1);
        	dual.add(b1);
        	dual.setVisible(true);       
        }
	}
	// 게임 시작버튼
 	private class starts implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {
			// TODO Auto-generated method stub
			p2.setVisible(true);
			dual.setVisible(false);
			starter.setVisible(false);
		
			userid = tf1.getText();
			
        	sec = 0;
        	sco = 0;
    		timers.setText("  "+sec+" 초");			// 라벨 0으로 초기화
    		scores.setText("점수 :  "+sco + "점 ");			// 라벨 0으로 초기화
    		
        	timerMix.cancel();	
    	  	timerMix = new Timer();		// 타이머 객체 초기화
    	  	timerHide.cancel();	
    		timerHide = new Timer();		// 타이머 객체 초기화
          	abc.cancel();				// 타이머 객체 없애기
    	  	abc = new Timer();    // 타이머 객체 초기화
    	  	
        
        	abc.scheduleAtFixedRate(new TimerTask() { 		//  게임시작후 시간초
        
				public  void run() {
					timers.setText("  "+sec+" 초");	
					sec=sec+1;
				}
			}, 2000,1000);		// 2초후 1초 간격으로 실행
        	System.out.println(userid);
		}
 		
 	}
 	
	private class player implements MouseListener{		// 두개 카드 확인 및 결과 표시
		public void mouseClicked(java.awt.event.MouseEvent e) {		
		}
		public void mouseEntered(java.awt.event.MouseEvent e) {
		}
		public void mouseExited(java.awt.event.MouseEvent e) {	
		}
		public void mousePressed(java.awt.event.MouseEvent e) {		
			check = ((JLabel)e.getSource());
        	if(check.getName()=="ㅇㅇ"){    // 눌린 버튼이 ㅇㅇ이면 성공한버튼 눌린거면 실행안하기
            	twocheck =0;    // 성공한 패를 눌렀으므로 카운트 다시 0으로
            	
        	}else if(twocheck==0 || twocheck==1){  
        		// 카드가 뒤집어 졌을때만 실행하기위해

        			twocheck += 1;		 // 카드 선택 될때마다 카운트 + 1
        	
        			// 첫번째 눌린 카드 번호
        			if(twocheck==1){		
        				first=((JLabel)e.getSource());  // 첫번째 눌린 버튼객체 가져오기
        				nopenumber =Integer.parseInt(first.getName()) -1;  // 이름이 string 이므로 int로 변환
        				selector = new ImageIcon(cards[nopenumber]+".jpg"); 
        				first.setIcon(selector);     // 버튼 눌려진 이미지 보여주기
        		 
        				firstnumber = cards[nopenumber];	// 카드 번호가 10이하면 그냥 저장
        				if(cards[nopenumber]>10)			// 카드 번호가 10보다 크면 -10
        					firstnumber = cards[nopenumber]-10; 
        			}// 첫번째 눌린 카드 번호

        			// 두번째 눌린 카드 번호
    				if(check.getName()==first.getName()){		// 두번째 클릭이 처음클릭한 카드를 또 선택했으면 카운트0
    					twocheck =1;
    				}else if(twocheck==2){			
        				second=((JLabel)e.getSource());  // 첫번째 눌린 버튼객체 가져오기
        				nopenumber =Integer.parseInt(second.getName()) -1;  // 이름이 string 이므로 int로 변환
        				selector = new ImageIcon(cards[nopenumber]+".jpg"); 
        				second.setIcon(selector);     // 버튼 눌려진 이미지 보여주기
        				
        				secondnumber = cards[nopenumber];	// 카드 번호가 10이하면 그냥 저장
        				if(cards[nopenumber]>10)				// 카드 번호가 10보다 크면 -10
        					secondnumber = cards[nopenumber]-10; 
        				
        				if(firstnumber==secondnumber ){   	// 첫번째 두번째 선택된 카드 비교
        					twocheck =0;		// 카드 2선택되면 다시  초기화
        					first.setName("ㅇㅇ"); 				// 성공이므로 버튼 이름 50으로 해서 선택못하게 하기
        					second.setName("ㅇㅇ"); 			// 성공이므로 버튼 이름 50으로 해서 선택못하게 하기
        			 
        					int end=0;  // 패 몇개 맞췄는지 확인하기 
        					for(int i=0; i<20; i++){		 // 패 몇개 맞췄는지 확인하기 
        						if((labelimage[i].getName()).equals("ㅇㅇ")){
        							end=end+1;
        							if (end==20){		// 20개 전부 맞았는지 체크
        								abc.cancel();		//  타이머 정지
        								timers.setText("  "+sec+" 초");	
        								resultsco = end*10-sec;
        							
        								scores.setText("점수 :  "+resultsco+" 점");
        								
        								dbwindow();
        								break;
        							}
        						}
        					}
        					
        				}else{
        					timecheck = new Timer();
        					timecheck.scheduleAtFixedRate(new TimerTask() { 	//첫번째 두번째 카드비교후 틀리면 몇초보여주기간 
        	
        						public void run() {
        							twocheck =0;		// 카드 2선택되면 다시  초기화 , 카드가 뒷면보일때까지 다른것 선택못하게하기
        							first.setIcon(ic1); 				// 틀렸으므로 첫번째 카드 다시 뒤집기
        							second.setIcon(ic1); 			// 틀렸으므로 두번째 카드 다시 뒤집기
        							timecheck.cancel();				// 뒤집고 타이머 종료
        						}
        					}, 300,1);				// 0.4초후 카드 뒷면 보이게 하기.
        				} 
        			}// 두번째 눌린 카드 번호		
        	}
			
		}
		public void mouseReleased(java.awt.event.MouseEvent e) {
		}
	}
	// 두개 카드 확인 및 결과 표시

	class condatabase implements ActionListener{    // 게임결과확인버튼으로 DB에 점수 저장하기  // 전부 주석처리해도된다.
		
		public void actionPerformed(ActionEvent e){	
			
			dbwindow.dispose();   // 확인버튼 있는 다이얼로그창 없애기

			int ReceivedDBsco=0;
			
			String driver = "oracle.jdbc.driver.OracleDriver";
	        String url = "jdbc:oracle:thin:@111.222.253.124:1521:XE";   // 자신의 오라클 아이피로해야한다.

	        Connection con = null;
	        PreparedStatement pstmt = null;
	        ResultSet rs = null;   // 리턴받아 사용할 객체 생성
	     
   	        String querySelect = "select id, jjacksco from USER_INFO where id=?"; 	 
										// SUTDAsco 검색   // 자신의 오라클DB에 맞게 설정해야한다.
	        
	        try{													// select
	            Class.forName(driver);
	            con = DriverManager.getConnection(url, "aaa", "aaa");
	            pstmt = con.prepareStatement(querySelect);
	           
	            pstmt.setString(1, userid); 
	            pstmt.executeUpdate();		// 쿼리문 실행
	            
	            rs = pstmt.executeQuery(); // 리턴받아온 쿼리 내용을 객체생성
	            while(rs.next()){
	                ReceivedDBsco = rs.getInt("jjacksco");
	            }
	            
	        }catch(Exception e1){
	            System.out.println(e1.getMessage());
	        }finally{
	            try {
	                rs.close(); 
	                pstmt.close(); 
	                con.close();   // 객체 생성한 반대 순으로 사용한 객체는 닫아준다.
	            } catch (Exception e2) {}
	        }

	        
	        String queryInsert = "UPDATE user_info SET jjacksco=? where id=?";
	        try{										// insert
	        	
	            con = DriverManager.getConnection(url, "aaa", "aaa"); // DB 연결   // 자신의 오라클DB에 맞게 설정해야한다.
	            pstmt = con.prepareStatement(queryInsert);   
	            
	            // 물음표가 4개 이므로 4개 각각 입력해줘야한다.
	            ReceivedDBsco = ReceivedDBsco +resultsco   ;
	            pstmt.setInt(1, ReceivedDBsco); 				 // pstmt객체에 각각 셋팅
	            pstmt.setString(2, userid); 
	            pstmt.executeUpdate();
	            
	            //pstmt.executeUpdate(); create insert update delete 
	            //pstmt.executeQuery(); select 
	        }catch(Exception e2){
	            System.out.println(e2.getMessage());
	        }finally{
	            try {
	                pstmt.close();
	                   con.close();               // 역순으로 닫아준다.
	            } catch (Exception e2) {}
	        }
		}
	}
	//  condatabase
	
	
	public void mixcard(){			// 카드 섞기
		
		int i=0;
		int rand=0;
		while(true){
			
			rand =  (int)(Math.random()*20+1);
			cards[i] =rand;

	   for(int j=0; j<20; j++){			
				if(j==i)
					break;
				if(cards[j]==rand){
					i=i-1 ;
					}
			}i=i+1;
			if(i==-1)i=0;
			if(i==20)break;
		}
	
	}
	
	public void setimage(){				// 이미지객체에 그림 가져오기
		
		ic1 = new ImageIcon("0.jpg");
		for ( int i = 0; i<20; i++){
			 ics[i]= new ImageIcon(cards[i]+".jpg");
		}
	}

	public void setButtonFirstImage(){		// 버튼 설정 및 처음 가져온 그림 보여주기
		
		for ( int i = 0; i<20; i++){
			 labelimage[i] =  new JLabel(ics[i]);
		}	
}

	public void setButtonResetimage(){		// 버튼에 리셋된 이미지 재설정하기

		for ( int i = 0; i<20; i++){
			 labelimage[i].setIcon(ics[i]);
		}
	}
	
	public void setbuttonname(){		// 버튼에 이름주기
		
		for ( int i = 0; i<20; i++){
			 labelimage[i].setName(Integer.toString(i+1));
		}		
	}

	public void hideButtonImage(){		// 버튼 그림 뒷면 보이기
		
		for ( int i = 0; i<20; i++){
			 labelimage[i].setIcon(ic1);
		}	
	}
	
	
	void dbwindow(){		// 다이얼로그 보여주기
		
			labelResultText.setText("축하합니다 !!");
			labelResultsco.setText("점수 :  "+resultsco+" 점 획득");
			dbwindow.setVisible(true);

	}
	
	
	public static void main(String[] args) {
		new WDB();	
	}	
}
