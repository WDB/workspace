class stacknode{
	int data;
	stacknode link;
}
class linkedstack{
	private stacknode top;
	public boolean isEmpty(){
		return (top == null);
	}
	
	 public void push(int item){
		 stacknode newNode = new stacknode();
		 newNode.data = item;
		 newNode.link = top;
		 top = newNode;
	 }
	 public int pop(){
		  if(isEmpty()) {
			 System.out.println("Deleting fail! Linked Stack is empty!!");
			 return 0;
		 }
		  else{
			  int item = top.data;
			  top = top.link;
			  return item;
		  }
	 }
}
class optexp2{
	//후위표기법으로 표현된 수식 문자열을 읽어서 수식의 계산
		//멤버 변수
		private String exp;
		//멤버 메소드
		public int evalpostfix(String postfix){
			//1.수식데이터 전체에 대해서
			//2.한 문자씩 빼서
			//3.연산자인지 아닌지 체크
			//4.피연산자이면 스택에 push
			//5.연산자이면 스택에 저장해놓았던 숫자 2개를 빼서(pop)
			//6.무슨 연산인가(+,-,*,/)에 따라서, 해당 연산을 수행
			linkedstack S = new linkedstack();
			int opr1, opr2, value;
			char testCh;
			for(int i=0; i<7; i++){
				testCh = exp.charAt(i);
			 	if(testCh != '+' && testCh != '-' && testCh !='*' && testCh != '/'){
			 		//연산자인가
			 		value = testCh - '0'; S.push(value);
			 	}
			 	else{
			 		//연산자가 아닌가
			 		opr2 = S.pop();
			 		opr1 = S.pop();
			 		switch(testCh){
			 			case '+' : S.push(opr1 + opr2); break;
			 			case '-' : S.push(opr1 - opr2); break;
			 			case '*' : S.push(opr1 * opr2); break;
			 			case '/' : S.push(opr1 / opr2); break;
			 		}
			 	}
			 }
			 return S.pop();
		}
}
public class WDB {
	public static void main(String args[]){
		optexp2 opt = new optexp2();
		int result;//evalpostfix()메소드의 리턴값을 받아내기
		String exp = "35*62/-";//후위형태로 표기된 수식,
		System.out.printf("\n후위 표기식:%s",exp);
		result = opt.evalpostfix(exp);
		System.out.printf("\n연산 결과 = %d\n", result);
	}
}
